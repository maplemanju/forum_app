model Users {
  id           Int      @id @default(autoincrement())
  publicId     String   @unique @map("public_id") @db.VarChar(20)
  snsId        String   @unique @map("sns_id") @db.VarChar(255)
  authProvider String   @map("auth_provider") @db.VarChar(50)
  email        String   @unique @map("email") @db.VarChar(255)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  isDeleted    Boolean  @default(false) @map("is_deleted")

  userRoles UserRoles[] @relation
  userInfo  UserInfo?   @relation
  votes     Votes[]     @relation
  posts     Posts[]     @relation
  comments  Comments[]  @relation

  @@map("users")
}

model Roles {
  id         Int         @id @default(autoincrement())
  roleName   String      @unique @map("role_name") @db.VarChar(50)
  categoryId Int?        @map("categoryId")
  userRoles  UserRoles[] @relation
  isDeleted  Boolean     @default(false) @map("is_deleted")

  category Categories? @relation(fields: [categoryId], references: [id])

  @@map("roles")
}

model UserRoles {
  userId    String  @db.VarChar(20)
  roleId    Int
  isDeleted Boolean @default(false) @map("is_deleted")

  user Users @relation(fields: [userId], references: [publicId])
  role Roles @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model UserInfo {
  userId       Int      @id
  displayName  String   @map("display_name") @db.VarChar(255)
  profileImage String?  @map("profile_image") @db.VarChar(255)
  score        Int      @default(0) @map("score")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  isDeleted    Boolean  @default(false) @map("is_deleted")

  user Users @relation(fields: [userId], references: [id])

  @@map("user_info")
}
