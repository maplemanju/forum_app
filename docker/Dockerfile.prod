# Dockerfile.prod

# Dependencies stage
FROM node:22-alpine AS deps
WORKDIR /app

# Install dependencies
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile


# Rebuild the source code only when needed
FROM node:22-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Pass all build arguments as environment variables
ARG DATABASE_URL
ARG S3_HOSTNAME
ARG NEXT_PUBLIC_S3_PATH
ARG NEXT_PUBLIC_SITE_NAME
ARG NEXT_PUBLIC_SITE_DESCRIPTION
ARG NEXT_PUBLIC_SIDEBAR_NEW_POST_COUNT
ARG NEXT_PUBLIC_POST_LIST_PER_PAGE
ARG NEXT_PUBLIC_COMMENT_LIST_PER_PAGE

# Set all ARGs as ENVs
ENV DATABASE_URL=$DATABASE_URL 
ENV S3_HOSTNAME=$S3_HOSTNAME
ENV NEXT_PUBLIC_S3_PATH=$NEXT_PUBLIC_S3_PATH
ENV NEXT_PUBLIC_SITE_NAME=$NEXT_PUBLIC_SITE_NAME
ENV NEXT_PUBLIC_SITE_DESCRIPTION=$NEXT_PUBLIC_SITE_DESCRIPTION
ENV NEXT_PUBLIC_SIDEBAR_NEW_POST_COUNT=$NEXT_PUBLIC_SIDEBAR_NEW_POST_COUNT
ENV NEXT_PUBLIC_POST_LIST_PER_PAGE=$NEXT_PUBLIC_POST_LIST_PER_PAGE
ENV NEXT_PUBLIC_COMMENT_LIST_PER_PAGE=$NEXT_PUBLIC_COMMENT_LIST_PER_PAGE


# Generate Prisma client
RUN yarn prisma generate

# Build Next.js app
RUN yarn next build

# Production stage
FROM node:22-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3000

# Copy only necessary files
COPY --from=builder /app/package.json /app/yarn.lock ./
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/database ./database
COPY --from=builder /app/next.config.ts ./next.config.ts

EXPOSE 3000

# Start the app with migrations
CMD ["sh", "-c", "yarn prisma migrate deploy && yarn next start"]
