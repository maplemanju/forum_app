# Dockerfile.prod

# Dependencies stage
FROM node:18-alpine AS deps
WORKDIR /app
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Install nice command
RUN apk add --no-cache util-linux

# Install dependencies
COPY package.json yarn.lock ./
RUN nice -n 10 yarn install --frozen-lockfile

# Prisma stage
FROM node:18-alpine AS prisma
WORKDIR /app
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY package.json yarn.lock ./
COPY database/schema ./database/schema

# Generate Prisma client
RUN mkdir -p database/schema/generated/client
RUN nice -n 10 yarn prisma generate

# Builder stage
FROM node:18-alpine AS builder
WORKDIR /app
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Copy dependencies and Prisma client
COPY --from=deps /app/node_modules ./node_modules
COPY --from=prisma /app/database/schema/generated ./database/schema/generated
COPY package.json yarn.lock ./

# Copy source files
COPY src/ ./src/
COPY public/ ./public/
COPY next.config.ts ./
COPY tsconfig.json ./
COPY postcss.config.mjs ./
COPY eslint.config.mjs ./
COPY .env* ./

# Build Next.js app
RUN nice -n 10 yarn next build

# Production stage
FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3000

# Copy only necessary files
COPY --from=builder /app/package.json /app/yarn.lock ./
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/database/schema/generated ./database/schema/generated

EXPOSE 3000

# Start the app
CMD ["yarn", "next", "start"]
