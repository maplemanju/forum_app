name: Deploy to EC2

on:
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }} # e.g., yourusername/your-repo-name
  DOCKER_CONTAINER_NAME: ${{ github.event.repository.name }}-container
  WORK_PATH: ~/lifehacksjapan-forum

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Build Arguments
        id: prepare-build-args
        run: |
          # Get DATABASE_URL and NEXT_PUBLIC_ variables from ENV_VARS
          build_args_multiline=$(echo "${{ secrets.ENV_VARS }}" | grep -E '^(DATABASE_URL|NEXT_PUBLIC_|S3_HOSTNAME)')
          echo "build_args_for_action<<EOF" >> $GITHUB_OUTPUT
          echo "$build_args_multiline" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # For debugging (without exposing secrets)
          echo "Number of build args prepared: $(echo "$build_args_multiline" | wc -l)"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.prod
          push: true
          no-cache: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: ${{ steps.prepare-build-args.outputs.build_args_for_action }}

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy using AWS SSM
        run: |
          # Encode environment variables in base64
          ENV_BASE64=$(echo "${{ secrets.ENV_VARS }}" | base64 -w 0)

          # Send commands to EC2 instance using SSM
          aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'set -x',
              'echo \"Creating work directory...\"',
              'sudo mkdir -p ${{ env.WORK_PATH }}',
              'echo \"Creating .env file...\"',
              'echo \"$ENV_BASE64\" | base64 -d > ${{ env.WORK_PATH }}/.env',
              'echo \"Pulling Docker image...\"',
              'sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest',
              'echo \"Stopping existing container...\"',
              'sudo docker stop ${{ env.DOCKER_CONTAINER_NAME }} || true',
              'echo \"Removing existing container...\"',
              'sudo docker rm ${{ env.DOCKER_CONTAINER_NAME }} || true',
              'echo \"Starting new container...\"',
              'sudo docker run -d -p 3000:3000 --name ${{ env.DOCKER_CONTAINER_NAME }} --restart unless-stopped --env-file ${{ env.WORK_PATH }}/.env ${{ env.DOCKER_IMAGE_NAME }}:latest',
              'echo \"Cleaning up...\"',
              'sudo rm ${{ env.WORK_PATH }}/.env',
              'sudo docker image prune -af',
              'echo \"Deployment complete!\"'
            ]"

      - name: Wait for deployment
        run: |
          # Get the most recent command ID with proper pagination
          COMMAND_ID=$(aws ssm list-commands \
            --filters "key=InstanceId,value=${{ secrets.EC2_INSTANCE_ID }}" \
            --no-paginate \
            --query "Commands[0].CommandId" \
            --output text | tr -d '\n\r')

          # Validate command ID format
          if ! [[ $COMMAND_ID =~ ^[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$ ]]; then
            echo "Invalid command ID format: $COMMAND_ID"
            exit 1
          fi

          echo "Waiting for command $COMMAND_ID to complete..."

          # Wait for the command to complete
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}"
