name: Deploy to EC2

on:
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }} # e.g., yourusername/your-repo-name
  DOCKER_CONTAINER_NAME: ${{ github.event.repository.name }}-container
  WORK_PATH: ~/lifehacksjapan-forum

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Build Arguments
        id: prepare-build-args
        run: |
          # Get DATABASE_URL and NEXT_PUBLIC_ variables from ENV_VARS
          build_args_multiline=$(echo "${{ secrets.ENV_VARS }}" | grep -E '^(DATABASE_URL|NEXT_PUBLIC_)')
          echo "build_args_for_action<<EOF" >> $GITHUB_OUTPUT
          echo "$build_args_multiline" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # For debugging (without exposing secrets)
          echo "Number of build args prepared: $(echo "$build_args_multiline" | wc -l)"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.prod
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ${{ steps.prepare-build-args.outputs.build_args_for_action }}

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push # Ensure build job completes first
    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e # Exit on error

            # Docker Login on EC2
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # Create .env file for runtime variables on EC2 from the GitHub Secret
            # This will include ALL variables from ENV_VARS secret
            echo "Creating .env file on EC2..."
            echo "${{ secrets.ENV_VARS }}" | sudo tee  ${{ env.WORK_PATH }}/.env > /dev/null
            echo ".env file created."

            # Pull the latest image
            echo "Pulling latest Docker image..."
            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
            echo "Image pulled."

            # Stop the currently running container (if any)
            echo "Stopping existing container if any..."
            sudo docker stop ${{ env.DOCKER_CONTAINER_NAME }} || true
            echo "Existing container stopped (or was not running)."

            # Remove the old container (if any)
            echo "Removing old container if any..."
            sudo docker rm ${{ env.DOCKER_CONTAINER_NAME }} || true
            echo "Old container removed (or did not exist)."

            # Run the new container, passing the .env file
            echo "Running new container with .env file..."
            sudo docker run -d \
              -p 3000:3000 \
              --name ${{ env.DOCKER_CONTAINER_NAME }} \
              --restart unless-stopped \
              --env-file ${{ env.WORK_PATH }}/.env \
              ${{ env.DOCKER_IMAGE_NAME }}:latest
            echo "New container started."

            # Clean up the .env file from EC2 for security
            echo "Removing .env file from EC2..."
            sudo rm ${{ env.WORK_PATH }}/.env
            echo ".env file removed."

            # Optional: Prune old images to free up space
            echo "Pruning old Docker images..."
            sudo docker image prune -af
            echo "Docker images pruned."
            echo "Deployment complete!"
